"""
Telegram Bot –¥–ª—è Mini App
"""

import asyncio
import logging
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

from app.core.config import settings
from app.services.telegram import TelegramService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
telegram_service = TelegramService()


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è Mini App"""
    
    def __init__(self):
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("models", self.models_command))
        self.application.add_handler(CommandHandler("my_tickets", self.my_tickets_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp
        keyboard = [
            [KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=settings.TELEGRAM_WEBAPP_URL))],
            [KeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π"), KeyboardButton("üé´ –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        if user.id in settings.admin_user_ids_list:
            keyboard.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π –∏ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π\n"
            "‚Ä¢ üìÑ –°–∫–∞—á–∏–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ üé´ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "‚Ä¢ üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
        )
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def models_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /models"""
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
        keyboard = [
            [InlineKeyboardButton(
                "üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π",
                web_app=WebAppInfo(url=f"{settings.TELEGRAM_WEBAPP_URL}/models")
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìã <b>–ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å–∫–∞—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def my_tickets_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_tickets"""
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton(
                "üé´ –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã",
                web_app=WebAppInfo(url=f"{settings.TELEGRAM_WEBAPP_URL}/tickets")
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üé´ <b>–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç—ã:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user = update.effective_user
        
        if user.id not in settings.admin_user_ids_list:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard = [
            [InlineKeyboardButton(
                "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                web_app=WebAppInfo(url=f"{settings.TELEGRAM_WEBAPP_URL}/admin")
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–¥–µ–ª—è–º–∏, —Ñ–∞–π–ª–∞–º–∏ –∏ —Ç–∏–∫–µ—Ç–∞–º–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/models - –ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π\n"
            "/my_tickets - –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
            "‚Ä¢ üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "‚Ä¢ üì± –£–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
            "<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
            keyboard = [
                [InlineKeyboardButton(
                    "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=settings.TELEGRAM_WEBAPP_URL)
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üöÄ <b>–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        
        elif text == "üìã –ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π":
            await self.models_command(update, context)
        
        elif text == "üé´ –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã":
            await self.my_tickets_command(update, context)
        
        elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            await self.admin_command(update, context)
        
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        
        else:
            await update.message.reply_text(
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def send_notification(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send notification to {user_id}: {e}")
    
    async def send_admin_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
        for admin_id in settings.admin_user_ids_list:
            await self.send_notification(admin_id, message)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot...")
        self.application.run_polling()
    
    async def run_webhook(self, webhook_url: str):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook"""
        logger.info(f"Starting Telegram bot with webhook: {webhook_url}")
        await self.application.bot.set_webhook(url=webhook_url)
        self.application.run_webhook(
            listen="0.0.0.0",
            port=8001,
            webhook_url=webhook_url
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if settings.TELEGRAM_WEBHOOK_URL:
        asyncio.run(bot.run_webhook(settings.TELEGRAM_WEBHOOK_URL))
    else:
        bot.run()


if __name__ == "__main__":
    main()
