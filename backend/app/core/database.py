"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase
from fastapi import HTTPException
from app.core.config import settings


# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –ë–î
engine = None
AsyncSessionLocal = None

if settings.DATABASE_URL and settings.DATABASE_URL != "postgresql://user:password@localhost:5432/telegram_mini_app":
    try:
        print(f"üîç Creating database engine with URL: {settings.DATABASE_URL}")
        async_url = settings.DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://")
        print(f"üîç Async URL: {async_url}")
        
        engine = create_async_engine(
            async_url,
            echo=settings.DEBUG,
            future=True
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
        AsyncSessionLocal = async_sessionmaker(
            engine,
            class_=AsyncSession,
            expire_on_commit=False
        )
        print("‚úÖ Database engine created successfully")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to create database engine: {e}")
        print(f"‚ö†Ô∏è Error type: {type(e)}")
        import traceback
        print(f"‚ö†Ô∏è Traceback: {traceback.format_exc()}")
        engine = None
        AsyncSessionLocal = None
else:
    print(f"‚ö†Ô∏è DATABASE_URL not configured or is default: {settings.DATABASE_URL}")


class Base(DeclarativeBase):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    pass


async def get_db() -> AsyncSession:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î"""
    if AsyncSessionLocal is None:
        raise HTTPException(
            status_code=503,
            detail="Database not available"
        )
    
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()
