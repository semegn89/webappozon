"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

from typing import List, Optional
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.models.user import User, UserRole
from app.models.ticket import Ticket, TicketStatus, TicketPriority
from app.models.ticket import TicketMessage
from app.services.telegram import TelegramService
from app.core.config import settings


class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.telegram_service = TelegramService()

    async def notify_ticket_created(self, ticket: Ticket, db: AsyncSession) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        
        Args:
            ticket: –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
            db: –°–µ—Å—Å–∏—è –ë–î
        """
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = (
            f"‚úÖ <b>–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"<b>–¢–µ–º–∞:</b> {ticket.subject}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{ticket.id}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {self._get_status_text(ticket.status)}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        await self.telegram_service.send_notification(
            ticket.user.telegram_user_id,
            user_message
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        admin_message = (
            f"üîî <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç</b>\n\n"
            f"<b>–¢–µ–º–∞:</b> {ticket.subject}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{ticket.id}\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {ticket.user.full_name}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_priority_text(ticket.priority)}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {self._get_status_text(ticket.status)}"
        )
        
        if ticket.model:
            admin_message += f"\n<b>–ú–æ–¥–µ–ª—å:</b> {ticket.model.name}"
        
        await self.telegram_service.send_admin_notification(admin_message)

    async def notify_ticket_status_changed(self, ticket: Ticket, old_status: TicketStatus) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
        
        Args:
            ticket: –¢–∏–∫–µ—Ç
            old_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        """
        if ticket.status == old_status:
            return
        
        status_emoji = {
            TicketStatus.OPEN: "üìù",
            TicketStatus.IN_PROGRESS: "üîÑ",
            TicketStatus.RESOLVED: "‚úÖ",
            TicketStatus.CLOSED: "üîí"
        }
        
        message = (
            f"{status_emoji.get(ticket.status, 'üìã')} <b>–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            f"<b>–¢–∏–∫–µ—Ç:</b> #{ticket.id} - {ticket.subject}\n"
            f"<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {self._get_status_text(ticket.status)}\n"
            f"<b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {self._get_status_text(old_status)}"
        )
        
        if ticket.assignee:
            message += f"\n<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {ticket.assignee.full_name}"
        
        await self.telegram_service.send_notification(
            ticket.user.telegram_user_id,
            message
        )

    async def notify_ticket_message(self, message: TicketMessage) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ç–∏–∫–µ—Ç–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–º–µ—Ç–∫–∞—Ö
        if message.is_internal_note:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if message.author_id == message.ticket.user_id:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            admin_message = (
                f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ</b>\n\n"
                f"<b>–¢–∏–∫–µ—Ç:</b> #{message.ticket.id} - {message.ticket.subject}\n"
                f"<b>–û—Ç:</b> {message.author.full_name}\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.body[:200]}{'...' if len(message.body) > 200 else ''}"
            )
            
            await self.telegram_service.send_admin_notification(admin_message)
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = (
                f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ</b>\n\n"
                f"<b>–¢–∏–∫–µ—Ç:</b> #{message.ticket.id} - {message.ticket.subject}\n"
                f"<b>–û—Ç:</b> {message.author.full_name}\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.body[:200]}{'...' if len(message.body) > 200 else ''}"
            )
            
            await self.telegram_service.send_notification(
                message.ticket.user.telegram_user_id,
                user_message
            )

    async def notify_high_priority_ticket(self, ticket: Ticket) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        
        Args:
            ticket: –¢–∏–∫–µ—Ç
        """
        if ticket.priority != TicketPriority.HIGH:
            return
        
        message = (
            f"üö® <b>–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢</b>\n\n"
            f"<b>–¢–∏–∫–µ—Ç:</b> #{ticket.id} - {ticket.subject}\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {ticket.user.full_name}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {self._get_priority_text(ticket.priority)}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ticket.description[:200]}{'...' if len(ticket.description) > 200 else ''}"
        )
        
        if ticket.model:
            message += f"\n<b>–ú–æ–¥–µ–ª—å:</b> {ticket.model.name}"
        
        await self.telegram_service.send_admin_notification(message)

    def _get_status_text(self, status: TicketStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        status_texts = {
            TicketStatus.OPEN: "–û—Ç–∫—Ä—ã—Ç",
            TicketStatus.IN_PROGRESS: "–í —Ä–∞–±–æ—Ç–µ",
            TicketStatus.RESOLVED: "–†–µ—à–µ–Ω",
            TicketStatus.CLOSED: "–ó–∞–∫—Ä—ã—Ç"
        }
        return status_texts.get(status, status.value)

    def _get_priority_text(self, priority: TicketPriority) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        priority_texts = {
            TicketPriority.LOW: "–ù–∏–∑–∫–∏–π",
            TicketPriority.NORMAL: "–û–±—ã—á–Ω—ã–π",
            TicketPriority.HIGH: "–í—ã—Å–æ–∫–∏–π"
        }
        return priority_texts.get(priority, priority.value)
