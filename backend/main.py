"""
–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è API –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

from fastapi import FastAPI, HTTPException, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import os
import asyncio
import asyncpg
import psycopg2
from psycopg2.extras import RealDictCursor
from contextlib import asynccontextmanager

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
db_pool = None

async def get_db_pool():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (lazy loading)"""
    global db_pool
    
    if db_pool is not None:
        return db_pool
    
    database_url = os.getenv("DATABASE_URL")
    if not database_url or database_url.startswith("postgresql://user:password"):
        return None
    
    try:
        # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
        clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
        print(f"üîç Connecting to database: {clean_url}")
        
        db_pool = await asyncpg.create_pool(clean_url, min_size=1, max_size=10)
        print("‚úÖ Database connected")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        try:
            await create_tables()
            print("‚úÖ Tables created")
        except Exception as e:
            print(f"‚ö†Ô∏è Error creating tables: {e}")
        
        return db_pool
        
    except Exception as e:
        print(f"‚ö†Ô∏è Database connection failed: {e}")
        print(f"‚ö†Ô∏è Error type: {type(e)}")
        print(f"‚ö†Ô∏è Error details: {str(e)}")
        return None

async def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url or database_url.startswith("postgresql://user:password"):
        return None
    
    try:
        # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
        clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        conn = await asyncpg.connect(
            clean_url,
            command_timeout=30,
            server_settings={
                'application_name': 'webappozon',
                'jit': 'off'
            }
        )
        return conn
    except Exception as e:
        print(f"‚ö†Ô∏è Error creating connection: {e}")
        return None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global db_pool
    
    # Startup
    print("üöÄ Starting Telegram Mini App Backend - Simple Version...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL")
    print(f"üîç DATABASE_URL from env: {database_url}")
    print(f"üîç DATABASE_URL exists: {database_url is not None}")
    print(f"üîç DATABASE_URL length: {len(database_url) if database_url else 0}")
    
    if database_url and not database_url.startswith("postgresql://user:password"):
        try:
            # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
            clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
            print(f"üîç Connecting to database: {clean_url}")
            print(f"üîç Database URL length: {len(database_url)}")
            print(f"üîç Clean URL length: {len(clean_url)}")
            
            db_pool = await asyncpg.create_pool(clean_url, min_size=1, max_size=10)
            print("‚úÖ Database connected")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            try:
                await create_tables()
                print("‚úÖ Tables created")
            except Exception as e:
                print(f"‚ö†Ô∏è Error creating tables: {e}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Database connection failed: {e}")
            print(f"‚ö†Ô∏è Error type: {type(e)}")
            print(f"‚ö†Ô∏è Error details: {str(e)}")
            db_pool = None
    else:
        print("‚ö†Ô∏è No database configured, running with mock data")
        db_pool = None
    
    print("‚úÖ Application startup complete")
    
    yield
    
    # Shutdown
    print("üõë Shutting down application...")
    if db_pool:
        await db_pool.close()

async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url or database_url.startswith("postgresql://user:password"):
        return
    
    try:
        # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
        clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
        conn = await asyncpg.connect(clean_url)
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É models
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS models (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                code VARCHAR(100) UNIQUE NOT NULL,
                brand VARCHAR(100),
                category VARCHAR(100),
                year_from INTEGER,
                year_to INTEGER,
                description TEXT,
                image_url VARCHAR(500),
                is_active BOOLEAN DEFAULT TRUE NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tickets
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS tickets (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                model_id INTEGER,
                subject VARCHAR(255) NOT NULL,
                description TEXT NOT NULL,
                priority VARCHAR(20) DEFAULT 'normal' NOT NULL,
                status VARCHAR(20) DEFAULT 'open' NOT NULL,
                assignee_id INTEGER,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE,
                closed_at TIMESTAMP WITH TIME ZONE
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS model_files (
                id SERIAL PRIMARY KEY,
                model_id INTEGER REFERENCES models(id) ON DELETE CASCADE,
                filename TEXT NOT NULL,
                filepath TEXT NOT NULL,
                file_size INTEGER,
                mime_type VARCHAR(100),
                comment TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–æ–≤
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS ticket_messages (
                id SERIAL PRIMARY KEY,
                ticket_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                message TEXT NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE
            )
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
        result = await conn.fetchval("SELECT COUNT(*) FROM models")
        if result == 0:
            await conn.execute("""
                INSERT INTO models (name, code, brand, category, description, is_active)
                VALUES ('Sample Model', 'SAMPLE001', 'Sample Brand', 'sample', 'This is a sample model', true)
            """)
            print("‚úÖ Sample model added")
        
        await conn.close()
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error creating tables: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Telegram Mini App API",
    description="API –¥–ª—è Telegram Mini App —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===== BASIC ENDPOINTS =====

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Telegram Mini App API - Simple Working Version",
        "version": "1.0.0",
        "status": "running",
        "environment": "production",
        "debug": "false",
        "has_database": db_pool is not None
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": "2024-01-01T00:00:00Z",
        "version": "1.0.0",
        "database_status": "connected" if db_pool else "not_configured"
    }

@app.get("/test")
async def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    print("üîç Test endpoint called")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º lazy loading –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_db_pool = await get_db_pool()
    
    return {
        "message": "API is working!",
        "cors_origins": ["*"],
        "has_database": current_db_pool is not None,
        "database_url_configured": bool(os.getenv("DATABASE_URL")),
        "database_url_from_env": os.getenv("DATABASE_URL", "NOT_SET")[:50] + "..." if os.getenv("DATABASE_URL") else "NOT_SET"
    }

@app.get("/test-db")
async def test_database_connection():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç Test database endpoint called")
    
    database_url = os.getenv("DATABASE_URL")
    print(f"üîç DATABASE_URL: {database_url}")
    
    if not database_url:
        return {"error": "DATABASE_URL not configured"}
    
    try:
        # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
        clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
        print(f"üîç Clean URL: {clean_url}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        test_pool = await asyncpg.create_pool(clean_url, min_size=1, max_size=1)
        print("‚úÖ Database connection successful")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        async with test_pool.acquire() as conn:
            result = await conn.fetchval("SELECT 1")
            print(f"‚úÖ Test query result: {result}")
        
        await test_pool.close()
        print("‚úÖ Database connection closed")
        
        return {
            "status": "success",
            "message": "Database connection successful",
            "test_query_result": result
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Database connection failed: {e}")
        print(f"‚ö†Ô∏è Error type: {type(e)}")
        print(f"‚ö†Ô∏è Error details: {str(e)}")
        
        return {
            "status": "error",
            "message": "Database connection failed",
            "error": str(e),
            "error_type": str(type(e))
        }

# ===== AUTH ENDPOINTS =====

@app.post("/api/v1/auth/verify")
@app.options("/api/v1/auth/verify")
async def verify_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
    return {
        "token": {
            "access_token": "test_token_12345",
            "token_type": "bearer"
        },
        "user": {
            "id": 1,
            "telegram_user_id": 123456789,
            "username": "test_user",
            "first_name": "Test",
            "last_name": "User",
            "language_code": "ru",
            "role": "user",
            "is_blocked": False,
            "full_name": "Test User",
            "is_admin": False
        }
    }

@app.get("/api/v1/auth/me")
async def get_current_user():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "id": 1,
        "telegram_user_id": 123456789,
        "username": "test_user",
        "first_name": "Test",
        "last_name": "User",
        "language_code": "ru",
        "role": "user",
        "is_blocked": False,
        "full_name": "Test User",
        "is_admin": False
    }

# ===== MODELS ENDPOINTS =====

@app.get("/api/v1/models")
async def get_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"""
    conn = await get_db_connection()
    if not conn:
        # Mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return {
            "models": [
                {
                    "id": 1,
                    "name": "Test Model 1",
                    "description": "Test model for demo purposes",
                    "category": "test",
                    "created_at": "2024-01-01T00:00:00Z",
                    "updated_at": "2024-01-01T00:00:00Z"
                }
            ]
        }
    
    try:
        rows = await conn.fetch("""
            SELECT id, name, code, brand, category, year_from, year_to, 
                   description, image_url, is_active, created_at, updated_at
            FROM models 
            WHERE is_active = true
            ORDER BY created_at DESC
        """)
        
        models = []
        for row in rows:
            models.append({
                "id": row["id"],
                "name": row["name"],
                "code": row["code"],
                "brand": row["brand"],
                "category": row["category"],
                "year_from": row["year_from"],
                "year_to": row["year_to"],
                "description": row["description"],
                "image_url": row["image_url"],
                "is_active": row["is_active"],
                "created_at": row["created_at"].isoformat() if row["created_at"] else None,
                "updated_at": row["updated_at"].isoformat() if row["updated_at"] else None
            })
        
        return {"models": models}
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting models: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get models: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.post("/api/v1/models")
async def create_model(model_data: dict):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        code = model_data.get("code")
        if not code or code.strip() == "":
            import time
            code = f"MODEL_{int(time.time() * 1000)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        existing = await conn.fetchval("SELECT id FROM models WHERE code = $1", code)
        if existing:
            import time
            code = f"MODEL_{int(time.time() * 1000)}_{existing}"
        
        row = await conn.fetchrow("""
            INSERT INTO models (name, code, brand, category, description, is_active)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING id, name, code, brand, category, description, created_at, updated_at
        """, 
            model_data.get("name", "New Model"),
            code,
            model_data.get("brand"),
            model_data.get("category", "general"),
            model_data.get("description", ""),
            True
        )
        
        return {
            "id": row["id"],
            "name": row["name"],
            "code": row["code"],
            "brand": row["brand"],
            "category": row["category"],
            "description": row["description"],
            "created_at": row["created_at"].isoformat() if row["created_at"] else None,
            "updated_at": row["updated_at"].isoformat() if row["updated_at"] else None
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error creating model: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to create model: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.get("/api/v1/models/{model_id}")
async def get_model(model_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ ID"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        row = await conn.fetchrow("""
                SELECT id, name, code, brand, category, year_from, year_to, 
                       description, image_url, is_active, created_at, updated_at
                FROM models 
                WHERE id = $1
            """, model_id)
            
            if not row:
                raise HTTPException(status_code=404, detail="Model not found")
            
            return {
                "id": row["id"],
                "name": row["name"],
                "code": row["code"],
                "brand": row["brand"],
                "category": row["category"],
                "year_from": row["year_from"],
                "year_to": row["year_to"],
                "description": row["description"],
                "image_url": row["image_url"],
                "is_active": row["is_active"],
                "created_at": row["created_at"].isoformat() if row["created_at"] else None,
                "updated_at": row["updated_at"].isoformat() if row["updated_at"] else None,
                "files": []  # –ü–æ–∫–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
            }
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting model: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get model: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.put("/api/v1/models/{model_id}")
async def update_model(model_id: int, model_data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å"""
    if not db_pool:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        async with db_pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            existing = await conn.fetchrow("SELECT id FROM models WHERE id = $1", model_id)
            if not existing:
                raise HTTPException(status_code=404, detail="Model not found")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
            row = await conn.fetchrow("""
                UPDATE models 
                SET name = COALESCE($2, name),
                    code = COALESCE($3, code),
                    brand = COALESCE($4, brand),
                    category = COALESCE($5, category),
                    year_from = COALESCE($6, year_from),
                    year_to = COALESCE($7, year_to),
                    description = COALESCE($8, description),
                    image_url = COALESCE($9, image_url),
                    is_active = COALESCE($10, is_active),
                    updated_at = NOW()
                WHERE id = $1
                RETURNING id, name, code, brand, category, year_from, year_to, 
                         description, image_url, is_active, created_at, updated_at
            """, 
                model_id,
                model_data.get("name"),
                model_data.get("code"),
                model_data.get("brand"),
                model_data.get("category"),
                model_data.get("year_from"),
                model_data.get("year_to"),
                model_data.get("description"),
                model_data.get("image_url"),
                model_data.get("is_active")
            )
            
            return {
                "id": row["id"],
                "name": row["name"],
                "code": row["code"],
                "brand": row["brand"],
                "category": row["category"],
                "year_from": row["year_from"],
                "year_to": row["year_to"],
                "description": row["description"],
                "image_url": row["image_url"],
                "is_active": row["is_active"],
                "created_at": row["created_at"].isoformat() if row["created_at"] else None,
                "updated_at": row["updated_at"].isoformat() if row["updated_at"] else None
            }
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error updating model: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to update model: {str(e)}")

@app.delete("/api/v1/models/{model_id}")
async def delete_model(model_id: int):
    """–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        existing = await conn.fetchrow("SELECT id FROM models WHERE id = $1", model_id)
        if not existing:
            raise HTTPException(status_code=404, detail="Model not found")
        
        # –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
        await conn.execute("DELETE FROM models WHERE id = $1", model_id)
        
        return {"message": "Model deleted successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error deleting model: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to delete model: {str(e)}")
    finally:
        if conn:
            await conn.close()

# ===== ADMIN STATS ENDPOINT =====

@app.get("/api/v1/admin/stats")
async def get_admin_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    print("üîç Admin stats endpoint called")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –≤ endpoint –º–æ–¥–µ–ª–µ–π
    database_url = os.getenv("DATABASE_URL")
    if not database_url or database_url.startswith("postgresql://user:password"):
        print("‚ö†Ô∏è No database configured")
        return {
            "total_models": 0,
            "active_tickets": 0,
            "total_users": 0,
            "total_downloads": 1234
        }
    
    try:
        print("üîç Getting statistics from database")
        # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
        clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
        conn = await asyncpg.connect(clean_url)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        models_count = await conn.fetchval("SELECT COUNT(*) FROM models")
        total_tickets = await conn.fetchval("SELECT COUNT(*) FROM tickets")
        active_tickets = await conn.fetchval("SELECT COUNT(*) FROM tickets WHERE status IN ('open', 'new', 'pending')")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
        except Exception:
            users_count = 0
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –º–æ–¥–µ–ª–µ–π
        try:
            total_downloads = await conn.fetchval("SELECT COALESCE(SUM(downloads), 0) FROM models")
        except Exception:
            total_downloads = 1234  # –ó–∞–≥–ª—É—à–∫–∞
        
        print(f"üîç Models count: {models_count}")
        print(f"üîç Total tickets: {total_tickets}")
        print(f"üîç Active tickets: {active_tickets}")
        print(f"üîç Users count: {users_count}")
        print(f"üîç Downloads: {total_downloads}")
        
        await conn.close()
        
        return {
            "total_models": models_count or 0,
            "total_tickets": total_tickets or 0,
            "active_tickets": active_tickets or 0,
            "total_users": users_count or 0,
            "total_downloads": int(total_downloads) if total_downloads else 1234
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting admin stats: {e}")
        return {
            "total_models": 0,
            "active_tickets": 0,
            "total_users": 0,
            "total_downloads": 1234
        }

# ===== USERS ENDPOINTS =====

@app.get("/api/v1/users")
async def get_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = await get_db_connection()
    if not conn:
        # Mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return {
            "users": [
                {
                    "id": 1,
                    "username": "test_user",
                    "first_name": "Test",
                    "last_name": "User",
                    "is_active": True,
                    "created_at": "2024-01-01T00:00:00Z"
                }
            ]
        }
    
    try:
        rows = await conn.fetch("""
            SELECT id, username, first_name, last_name, is_active, created_at
            FROM users 
            ORDER BY created_at DESC
        """)
        
        users = []
        for row in rows:
            users.append({
                "id": row["id"],
                "username": row["username"],
                "first_name": row["first_name"],
                "last_name": row["last_name"],
                "is_active": row["is_active"],
                "created_at": row["created_at"].isoformat() if row["created_at"] else None
            })
        
        return {"users": users}
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting users: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get users: {str(e)}")
    finally:
        if conn:
            await conn.close()

# ===== TICKETS ENDPOINTS =====

@app.get("/api/v1/tickets")
async def get_tickets():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤"""
    conn = await get_db_connection()
    if not conn:
        # Mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return {
            "tickets": [
                {
                    "id": 1,
                    "subject": "Test Ticket",
                    "description": "This is a test ticket",
                    "status": "open",
                    "priority": "normal",
                    "created_at": "2024-01-01T00:00:00Z",
                    "updated_at": "2024-01-01T00:00:00Z"
                }
            ]
        }
    
    try:
        rows = await conn.fetch("""
            SELECT id, user_id, model_id, subject, description, priority, 
                   status, assignee_id, created_at, updated_at, closed_at
            FROM tickets 
            ORDER BY created_at DESC
        """)
        
        tickets = []
        for row in rows:
            tickets.append({
                "id": row["id"],
                "user_id": row["user_id"],
                "model_id": row["model_id"],
                "subject": row["subject"],
                "description": row["description"],
                "priority": row["priority"],
                "status": row["status"],
                "assignee_id": row["assignee_id"],
                "created_at": row["created_at"].isoformat() if row["created_at"] else None,
                "updated_at": row["updated_at"].isoformat() if row["updated_at"] else None,
                "closed_at": row["closed_at"].isoformat() if row["closed_at"] else None
            })
        
        return {"tickets": tickets}
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting tickets: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get tickets: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.post("/api/v1/tickets")
async def create_ticket(ticket_data: dict):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        row = await conn.fetchrow("""
            INSERT INTO tickets (user_id, model_id, subject, description, priority, status)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING id, user_id, model_id, subject, description, priority, status, created_at
        """, 
            ticket_data.get("user_id", 1),
            ticket_data.get("model_id"),
            ticket_data.get("subject", "New Ticket"),
            ticket_data.get("description", ""),
            ticket_data.get("priority", "normal"),
            ticket_data.get("status", "open")
        )
        
        return {
            "id": row["id"],
            "user_id": row["user_id"],
            "model_id": row["model_id"],
            "subject": row["subject"],
            "description": row["description"],
            "priority": row["priority"],
            "status": row["status"],
            "created_at": row["created_at"].isoformat() if row["created_at"] else None
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error creating ticket: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to create ticket: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.get("/api/v1/tickets/{ticket_id}")
async def get_ticket(ticket_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ç –ø–æ ID"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = await conn.fetchrow("""
            SELECT id, user_id, model_id, subject, description, priority, status, created_at, updated_at
            FROM tickets 
            WHERE id = $1
        """, ticket_id)
        
        if not ticket:
            raise HTTPException(status_code=404, detail="Ticket not found")
        
        return {
            "id": ticket["id"],
            "user_id": ticket["user_id"],
            "model_id": ticket["model_id"],
            "subject": ticket["subject"],
            "description": ticket["description"],
            "priority": ticket["priority"],
            "status": ticket["status"],
            "created_at": ticket["created_at"].isoformat() if ticket["created_at"] else None,
            "updated_at": ticket["updated_at"].isoformat() if ticket["updated_at"] else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting ticket: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get ticket: {str(e)}")
    finally:
        if conn:
            await conn.close()

# ===== TICKET MESSAGES ENDPOINTS =====

@app.get("/api/v1/tickets/{ticket_id}/messages")
async def get_ticket_messages(ticket_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        ticket = await conn.fetchrow("SELECT id FROM tickets WHERE id = $1", ticket_id)
        if not ticket:
            raise HTTPException(status_code=404, detail="Ticket not found")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await conn.fetch("""
            SELECT id, ticket_id, user_id, message, created_at
            FROM ticket_messages 
            WHERE ticket_id = $1 
            ORDER BY created_at ASC
        """, ticket_id)
        
        return [{
            "id": msg["id"],
            "ticket_id": msg["ticket_id"],
            "user_id": msg["user_id"],
            "message": msg["message"],
            "created_at": msg["created_at"].isoformat() if msg["created_at"] else None
        } for msg in messages]
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting ticket messages: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get messages: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.post("/api/v1/tickets/{ticket_id}/messages")
async def create_ticket_message(ticket_id: int, message_data: dict):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        ticket = await conn.fetchrow("SELECT id, user_id FROM tickets WHERE id = $1", ticket_id)
        if not ticket:
            raise HTTPException(status_code=404, detail="Ticket not found")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω user_id —Ç–∏–∫–µ—Ç–∞ - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –ï—Å–ª–∏ user_id = 0 –∏–ª–∏ -1 - —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        sender_user_id = message_data.get("user_id")
        if sender_user_id is None:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–≤—à–∏–π —Ç–∏–∫–µ—Ç
            sender_user_id = ticket["user_id"]
        elif sender_user_id == 0 or sender_user_id == -1:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            sender_user_id = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        row = await conn.fetchrow("""
            INSERT INTO ticket_messages (ticket_id, user_id, message)
            VALUES ($1, $2, $3)
            RETURNING id, ticket_id, user_id, message, created_at
        """, 
            ticket_id,
            sender_user_id,
            message_data.get("body", message_data.get("message", ""))
        )
        
        return {
            "id": row["id"],
            "ticket_id": row["ticket_id"],
            "user_id": row["user_id"],
            "message": row["message"],
            "created_at": row["created_at"].isoformat() if row["created_at"] else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error creating ticket message: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to create message: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.post("/init-db")
async def init_database():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã"""
    print("üîç Init database endpoint called")
    
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        return {"status": "error", "message": "DATABASE_URL not configured"}
    
    try:
        # –£–±–∏—Ä–∞–µ–º channel_binding=require –∏ –∑–∞–º–µ–Ω—è–µ–º sslmode=require –Ω–∞ sslmode=prefer
        clean_url = database_url.replace("&channel_binding=require", "").replace("sslmode=require", "sslmode=prefer")
        conn = await asyncpg.connect(clean_url)
        
        await create_tables()
        await conn.close()
        
        return {"status": "success", "message": "Database tables created successfully"}
    except Exception as e:
        return {"status": "error", "message": f"Failed to create tables: {str(e)}"}

# ===== FILE UPLOAD ENDPOINTS =====

@app.post("/api/v1/files")
async def upload_file(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        allowed_extensions = {'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', 'xlsx', 'txt'}
        file_extension = file.filename.split('.')[-1].lower() if '.' in file.filename else ''
        
        if file_extension not in allowed_extensions:
            raise HTTPException(status_code=400, detail="File type not allowed")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        contents = await file.read()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        return {
            "file": {
                "name": file.filename,
                "size": len(contents),
                "type": file.content_type,
                "url": f"/uploads/{file.filename}"  # –ó–∞–≥–ª—É—à–∫–∞ URL
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error uploading file: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to upload file: {str(e)}")

# ===== MODEL FILES ENDPOINTS =====

@app.post("/api/v1/models/{model_id}/files")
async def upload_model_file(model_id: int, file: UploadFile = File(...), comment: str = ""):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –º–æ–¥–µ–ª–∏"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = await conn.fetchrow("SELECT id FROM models WHERE id = $1", model_id)
        if not model:
            raise HTTPException(status_code=404, detail="Model not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        allowed_extensions = {'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', 'xlsx', 'txt'}
        file_extension = file.filename.split('.')[-1].lower() if '.' in file.filename else ''
        
        if file_extension not in allowed_extensions:
            raise HTTPException(status_code=400, detail="File type not allowed")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        contents = await file.read()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        import uuid
        unique_filename = f"{uuid.uuid4()}_{file.filename}"
        filepath = f"/uploads/models/{model_id}/{unique_filename}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        row = await conn.fetchrow("""
            INSERT INTO model_files (model_id, filename, filepath, file_size, mime_type, comment)
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING id, filename, filepath, file_size, mime_type, comment, created_at
        """, 
            model_id, file.filename, filepath, len(contents), file.content_type, comment
        )
        
        return {
            "id": row["id"],
            "filename": row["filename"],
            "filepath": row["filepath"],
            "file_size": row["file_size"],
            "mime_type": row["mime_type"],
            "comment": row["comment"],
            "created_at": row["created_at"].isoformat(),
            "url": f"https://api.gakshop.com{filepath}"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error uploading model file: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to upload file: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.get("/api/v1/models/{model_id}/files")
async def get_model_files(model_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = await conn.fetchrow("SELECT id FROM models WHERE id = $1", model_id)
        if not model:
            raise HTTPException(status_code=404, detail="Model not found")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        files = await conn.fetch("""
            SELECT id, filename, filepath, file_size, mime_type, comment, created_at
            FROM model_files
            WHERE model_id = $1
            ORDER BY created_at DESC
        """, model_id)
        
        return [
            {
                "id": file["id"],
                "filename": file["filename"],
                "filepath": file["filepath"],
                "file_size": file["file_size"],
                "mime_type": file["mime_type"],
                "comment": file["comment"],
                "created_at": file["created_at"].isoformat(),
                "url": f"https://api.gakshop.com{file['filepath']}"
            }
            for file in files
        ]
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting model files: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get files: {str(e)}")
    finally:
        if conn:
            await conn.close()

@app.delete("/api/v1/models/{model_id}/files/{file_id}")
async def delete_model_file(model_id: int, file_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"""
    conn = await get_db_connection()
    if not conn:
        raise HTTPException(status_code=503, detail="Database not available")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_record = await conn.fetchrow("""
            SELECT id, filename FROM model_files 
            WHERE id = $1 AND model_id = $2
        """, file_id, model_id)
        
        if not file_record:
            raise HTTPException(status_code=404, detail="File not found")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await conn.execute("DELETE FROM model_files WHERE id = $1", file_id)
        
        return {"message": f"File '{file_record['filename']}' deleted successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è Error deleting model file: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to delete file: {str(e)}")
    finally:
        if conn:
            await conn.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
